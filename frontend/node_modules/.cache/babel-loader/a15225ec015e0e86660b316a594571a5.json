{"remainingRequest":"C:\\wamp64\\www\\requestportal\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\wamp64\\www\\requestportal\\frontend\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\wamp64\\www\\requestportal\\frontend\\src\\services\\storage.service.js","dependencies":[{"path":"C:\\wamp64\\www\\requestportal\\frontend\\src\\services\\storage.service.js","mtime":1558509080686},{"path":"C:\\wamp64\\www\\requestportal\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\wamp64\\www\\requestportal\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\wamp64\\www\\requestportal\\frontend\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["var TOKEN_KEY = 'access_token';\nvar USER = 'user';\n/**\r\n * Manage the how Access Tokens are being stored and retreived from storage.\r\n *\r\n * Current implementation stores to localStorage. Local Storage should always be\r\n * accessed through this instace.\r\n**/\n\nvar TokenService = {\n  getToken: function getToken() {\n    return localStorage.getItem(TOKEN_KEY);\n  },\n  saveToken: function saveToken(accessToken) {\n    localStorage.setItem(TOKEN_KEY, accessToken);\n  },\n  removeToken: function removeToken() {\n    localStorage.removeItem(TOKEN_KEY);\n  }\n};\nexport { TokenService };",{"version":3,"sources":["C:\\wamp64\\www\\requestportal\\frontend\\src\\services\\storage.service.js"],"names":["TOKEN_KEY","USER","TokenService","getToken","localStorage","getItem","saveToken","accessToken","setItem","removeToken","removeItem"],"mappings":"AAAA,IAAMA,SAAS,GAAG,cAAlB;AACA,IAAMC,IAAI,GAAG,MAAb;AAEA;;;;;;;AAMA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,QADmB,sBACP;AACV,WAAOC,YAAY,CAACC,OAAb,CAAqBL,SAArB,CAAP;AACD,GAHkB;AAKnBM,EAAAA,SALmB,qBAKRC,WALQ,EAKK;AACtBH,IAAAA,YAAY,CAACI,OAAb,CAAqBR,SAArB,EAAgCO,WAAhC;AACD,GAPkB;AASnBE,EAAAA,WATmB,yBASJ;AACbL,IAAAA,YAAY,CAACM,UAAb,CAAwBV,SAAxB;AACD;AAXkB,CAArB;AAcA,SAASE,YAAT","sourcesContent":["const TOKEN_KEY = 'access_token'\r\nconst USER = 'user'\r\n\r\n/**\r\n * Manage the how Access Tokens are being stored and retreived from storage.\r\n *\r\n * Current implementation stores to localStorage. Local Storage should always be\r\n * accessed through this instace.\r\n**/\r\nconst TokenService = {\r\n  getToken () {\r\n    return localStorage.getItem(TOKEN_KEY)\r\n  },\r\n\r\n  saveToken (accessToken) {\r\n    localStorage.setItem(TOKEN_KEY, accessToken)\r\n  },\r\n\r\n  removeToken () {\r\n    localStorage.removeItem(TOKEN_KEY)\r\n  },\r\n}\r\n\r\nexport { TokenService }\r\n"]}]}