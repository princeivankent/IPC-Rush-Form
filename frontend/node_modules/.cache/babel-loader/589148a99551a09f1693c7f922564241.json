{"remainingRequest":"C:\\wamp64\\www\\requestportal\\frontend\\node_modules\\thread-loader\\dist\\cjs.js!C:\\wamp64\\www\\requestportal\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\wamp64\\www\\requestportal\\frontend\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\wamp64\\www\\requestportal\\frontend\\src\\store\\login.module.js","dependencies":[{"path":"C:\\wamp64\\www\\requestportal\\frontend\\src\\store\\login.module.js","mtime":1558509914018},{"path":"C:\\wamp64\\www\\requestportal\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\wamp64\\www\\requestportal\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\wamp64\\www\\requestportal\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\wamp64\\www\\requestportal\\frontend\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\wamp64\\\\www\\\\requestportal\\\\frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { UserService, AuthenticationError } from '../services/user.service';\nimport { TokenService } from '../services/storage.service';\nimport JwtService from '../services/jwt.service';\nimport router from '../router';\nvar login = {\n  namespaced: true,\n  state: {\n    authenticating: false,\n    isSessionExpires: false,\n    authenticationErrorCode: 0,\n    authenticationError: '',\n    accessToken: TokenService.getToken()\n  },\n  getters: {\n    loggedIn: function loggedIn(state) {\n      return state.accessToken ? true : false;\n    },\n    authenticationErrorCode: function authenticationErrorCode(state) {\n      return state.authenticationErrorCode;\n    },\n    authenticationError: function authenticationError(state) {\n      return state.authenticationError;\n    },\n    authenticating: function authenticating(state) {\n      return state.authenticating;\n    },\n    userDetails: function userDetails(state) {\n      return JwtService.decrypt(state.accessToken);\n    }\n  },\n  mutations: {\n    loginRequest: function loginRequest(state) {\n      state.authenticating = true;\n      state.authenticationError = '';\n      state.authenticationErrorCode = 0;\n    },\n    loginSuccess: function loginSuccess(state, response) {\n      state.accessToken = response.access_token;\n      state.authenticating = false;\n    },\n    loginError: function loginError(state, _ref) {\n      var errorCode = _ref.errorCode,\n          errorMessage = _ref.errorMessage;\n      state.authenticating = false;\n      state.authenticationErrorCode = errorCode;\n      state.authenticationError = errorMessage;\n    },\n    cancelAuthentication: function cancelAuthentication(state) {\n      state.authenticating = false;\n    },\n    logoutSuccess: function logoutSuccess(state) {\n      state.accessToken = '';\n    },\n    // Error hooks\n    unAuthorized: function unAuthorized(state, res) {\n      state.authenticationErrorCode = res.status;\n      state.authenticationError = res.message;\n    }\n  },\n  actions: {\n    login: function () {\n      var _login = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(_ref2, payload) {\n        var commit, response;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                commit = _ref2.commit;\n                commit('loginRequest');\n                _context.prev = 2;\n                _context.next = 5;\n                return UserService.login(payload.employee_number, payload.password);\n\n              case 5:\n                response = _context.sent;\n                commit('loginSuccess', response); // Redirect the user to the page he first tried to visit or to the home view\n\n                router.push(router.history.current.query.redirect || '/');\n                return _context.abrupt(\"return\", true);\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](2);\n\n                if (_context.t0 instanceof AuthenticationError) {\n                  commit('loginError', {\n                    errorCode: _context.t0.errorCode,\n                    errorMessage: _context.t0.message\n                  });\n                }\n\n                return _context.abrupt(\"return\", false);\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 11]]);\n      }));\n\n      function login(_x, _x2) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }(),\n    logout: function () {\n      var _logout = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(_ref3) {\n        var commit;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                commit = _ref3.commit;\n                _context2.next = 3;\n                return UserService.logout();\n\n              case 3:\n                commit('logoutSuccess');\n                router.push('login');\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function logout(_x3) {\n        return _logout.apply(this, arguments);\n      }\n\n      return logout;\n    }(),\n    unAuthorized: function unAuthorized(_ref4, message) {\n      var commit = _ref4.commit;\n      UserService.logout();\n      commit('logoutSuccess');\n      commit('unAuthorized', message);\n      router.push('/login');\n    }\n  }\n};\nexport default login;",{"version":3,"sources":["C:\\wamp64\\www\\requestportal\\frontend\\src\\store\\login.module.js"],"names":["UserService","AuthenticationError","TokenService","JwtService","router","login","namespaced","state","authenticating","isSessionExpires","authenticationErrorCode","authenticationError","accessToken","getToken","getters","loggedIn","userDetails","decrypt","mutations","loginRequest","loginSuccess","response","access_token","loginError","errorCode","errorMessage","cancelAuthentication","logoutSuccess","unAuthorized","res","status","message","actions","payload","commit","employee_number","password","push","history","current","query","redirect","logout"],"mappings":"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","sourcesContent":["import { UserService, AuthenticationError } from '../services/user.service'\r\nimport { TokenService } from '../services/storage.service'\r\nimport JwtService from '../services/jwt.service'\r\nimport router from '../router'\r\n\r\nconst login = {\r\n  namespaced: true,\r\n  state: {\r\n    authenticating: false,\r\n    isSessionExpires: false,\r\n    authenticationErrorCode: 0,\r\n    authenticationError: '',\r\n    accessToken: TokenService.getToken(),\r\n  },\r\n\r\n  getters: {\r\n    loggedIn: (state) => {\r\n      return state.accessToken ? true : false\r\n    },\r\n\r\n    authenticationErrorCode: (state) => {\r\n      return state.authenticationErrorCode\r\n    },\r\n\r\n    authenticationError: (state) => {\r\n      return state.authenticationError\r\n    },\r\n\r\n    authenticating: (state) => {\r\n      return state.authenticating\r\n    },\r\n\r\n    userDetails: (state) => {\r\n      return JwtService.decrypt(state.accessToken)\r\n    }\r\n  },\r\n\r\n  mutations: {\r\n    loginRequest (state) {\r\n      state.authenticating = true;\r\n      state.authenticationError = ''\r\n      state.authenticationErrorCode = 0\r\n    },\r\n\r\n    loginSuccess (state, response) {\r\n      state.accessToken = response.access_token\r\n      state.authenticating = false\r\n    },\r\n\r\n    loginError (state, {errorCode, errorMessage}) {\r\n      state.authenticating = false\r\n      state.authenticationErrorCode = errorCode\r\n      state.authenticationError = errorMessage\r\n    },\r\n\r\n    cancelAuthentication (state) {\r\n      state.authenticating = false\r\n    },\r\n\r\n    logoutSuccess (state) {\r\n      state.accessToken = ''\r\n    },\r\n\r\n    // Error hooks\r\n    unAuthorized (state, res) {\r\n      state.authenticationErrorCode = res.status\r\n      state.authenticationError = res.message\r\n    }\r\n  },\r\n\r\n  actions: {\r\n    async login({ commit }, payload) {\r\n      commit('loginRequest')\r\n\r\n      try {\r\n        const response = await UserService.login(payload.employee_number, payload.password)\r\n        commit('loginSuccess', response)\r\n\r\n        // Redirect the user to the page he first tried to visit or to the home view\r\n        router.push(router.history.current.query.redirect || '/')\r\n\r\n        return true\r\n      } \r\n      catch (e) {\r\n        if (e instanceof AuthenticationError) {\r\n          commit('loginError', {errorCode: e.errorCode, errorMessage: e.message})\r\n        }\r\n\r\n        return false\r\n      }\r\n    },\r\n\r\n    async logout({ commit }) {\r\n      await UserService.logout()\r\n      commit('logoutSuccess')\r\n      \r\n      router.push('login')\r\n    },\r\n\r\n    unAuthorized ({ commit }, message) {\r\n      UserService.logout()\r\n      commit('logoutSuccess')\r\n      commit('unAuthorized', message)\r\n      router.push('/login')\r\n    }\r\n  }\r\n}\r\n\r\nexport default login\r\n"]}]}